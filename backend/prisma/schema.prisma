// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       String        @id @default(uuid())
  name     String
  email    String     @unique
  password String
  posts    Posts[]
  comments Comments[]
  friends  Friends[]
  likes    Likes[]
  Profiles Profiles[]
}

model Profiles {
  id                   String                    @id @default(uuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  user                 Users                  @relation(fields: [userId], references: [id])
  userId               String
  username             String
  website              String
  company              String
  authorEmail          String                 @unique
  isPublic             Boolean                @default(false)
  programmingLanguages ProgrammingLanguages[]
  picture              Picture?
  posts                Posts[]
  likes                Likes[]
}

model ProgrammingLanguages {
  id        String      @id @default(uuid())
  language  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String
  profile   Profiles @relation(fields: [profileId], references: [id])

  @@unique([language, id])
}

model Picture {
  id        String      @id @default(uuid())
  avatarUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String      @unique
  profile   Profiles @relation(fields: [profileId], references: [id])
}

model Posts {
  id        String        @id @default(uuid())
  user      Users      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  content   String?
  published Boolean    @default(false)
  viewCount Int        @default(0)
  profileId String?
  profile   Profiles?  @relation(fields: [profileId], references: [id])
  likes     Likes[]
  comments  Comments[]
}

model Comments {
  id      String    @id @default(uuid())
  post    Posts  @relation(fields: [postId], references: [id])
  postId  String
  user    Users  @relation(fields: [userId], references: [id])
  userId  String
  content String
  img     String
  audio   String
  file    String
}

model Friends {
  id     String   @id @default(uuid())
  user   Users @relation(fields: [userId], references: [id])
  userId String
}

model Likes {
  id        String      @id @default(uuid())
  post      Posts    @relation(fields: [postId], references: [id])
  postId    String
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  profile   Profiles @relation(fields: [profileId], references: [id])
  profileId String
}
