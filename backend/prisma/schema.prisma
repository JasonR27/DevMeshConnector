generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model Users {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  username     String     @unique
  passwordHash String
  role         String
  posts        Posts[]
  comments     Comments[]
  friends      Friends[]
  likes        Likes[]
  Profiles     Profiles[]
  @@schema("auth")
}

model Profiles {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String
  username             String
  website              String
  company              String
  authorEmail          String   
  isPublic             Boolean  @default(false)
  programmingLanguages String[]
  likes                Likes[]
  picture              Picture?
  posts                Posts[]
  user                 Users    @relation(fields: [userId], references: [id])
  @@schema("public")
}

model Picture {
  id        String   @id @default(uuid())
  avatarUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String   @unique
  profile   Profiles @relation(fields: [profileId], references: [id])
  @@schema("public")
}

model Posts {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  content   String?
  published Boolean    @default(false)
  viewCount Int
  profileId String?
  comments  Comments[]
  likes     Likes[]
  profile   Profiles?  @relation(fields: [profileId], references: [id])
  user      Users      @relation(fields: [userId], references: [id])
  @@schema("public")
}

model Comments {
  id      String @id @default(uuid())
  postId  String
  userId  String
  content String
  img     String
  audio   String
  file    String
  post    Posts  @relation(fields: [postId], references: [id])
  user    Users  @relation(fields: [userId], references: [id])
  @@schema("public")
}

model Friends {
  id     String @id @default(uuid())
  userId String
  user   Users  @relation(fields: [userId], references: [id])
  @@schema("public")
}

model Likes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  profileId String
  post      Posts    @relation(fields: [postId], references: [id])
  profile   Profiles @relation(fields: [profileId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
  @@schema("public")
}
